/*

Qualitative Social Process Analysis (Q-SoPrA)
Copyright (C) 2019 University of Manchester  

This file is part of Q-SoPrA.

Q-SoPrA is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Q-SoPrA is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Q-SoPrA.  If not, see <http://www.gnu.org/licenses/>.

*/

#include "../include/WelcomeDialog.h"

WelcomeDialog::WelcomeDialog(QWidget *parent, EventSequenceDatabase *esdPtr) : QDialog(parent) 
{
  _esdPtr = esdPtr;
  _exitStatus = 1;
  
  titleLabel = new QLabel("<h1>Welcome to Q-SoPrA</h1>", this);
  titleLabel->setAlignment(Qt::AlignHCenter);
  imageLabel = new QLabel(this);
  QPixmap image("./images/welcome_background");
  imageLabel->setPixmap(image);
  
  newDatabaseButton = new QPushButton("Create new database", this);
  openDatabaseButton = new QPushButton("Open existing database", this);
  exitButton = new QPushButton("Exit program", this);
  
  connect(newDatabaseButton, SIGNAL(clicked()), this, SLOT(newDatabase()));
  connect(openDatabaseButton, SIGNAL(clicked()), this, SLOT(openDatabase()));
  connect(exitButton, SIGNAL(clicked()), this, SLOT(quitApp()));

  QPointer<QVBoxLayout> welcomeLayout = new QVBoxLayout;
  welcomeLayout->addWidget(titleLabel);
  welcomeLayout->addWidget(imageLabel);
  QPointer<QHBoxLayout> buttonLayout = new QHBoxLayout;
  buttonLayout->addWidget(newDatabaseButton);
  buttonLayout->addWidget(openDatabaseButton);
  buttonLayout->addWidget(exitButton);
  welcomeLayout->addLayout(buttonLayout);
  setWindowTitle("Q-SoPrA (Qualitative Social Process Analysis)");
  setLayout(welcomeLayout);  
}

void WelcomeDialog::newDatabase() 
{
  QString dbName = QFileDialog::getSaveFileName(this, tr("New database"),"", tr("db files (*.db)"));
  if (!dbName.trimmed().isEmpty()) 
    {
      if (!dbName.endsWith(".db")) 
	{
	  dbName.append(".db");
	}
      QFileInfo check_file(dbName);
      if (check_file.exists() && check_file.isFile()) 
	{
	  QFile::remove(dbName);
	}
      _esdPtr->openDB(dbName);
      bool ok = _esdPtr->database.open();
      if (!ok) 
	{
	  QPointer<QMessageBox> errorBox = new QMessageBox(this);
	  errorBox->setText(tr("<b>ERROR</b>"));
	  errorBox->setInformativeText("Creation of new database failed.");
	  errorBox->exec();
	  return;
	}
      else 
	{
	  _esdPtr->database.exec("PRAGMA synchronous=OFF");
	  _esdPtr->database.exec("PRAGMA journal_mode=MEMORY");
	  QSqlQuery *query = new QSqlQuery;
	  qApp->setOverrideCursor(Qt::WaitCursor); // This can take a while
	  query->exec("CREATE TABLE incidents "
		      "(id integer PRIMARY KEY AUTOINCREMENT, "
		      "ch_order integer, "
		      "timestamp text, "
		      "description text, "
		      "raw text, "
		      "comment text, "
		      "source text, "
		      "mark integer)");
	  query->exec("CREATE TABLE incident_attributes "
		      "(id integer PRIMARY KEY AUTOINCREMENT, "
		      "name text, "
		      "description text, "
		      "father text)");
	  query->exec("CREATE TABLE attributes_to_incidents "
		      "(id integer PRIMARY KEY AUTOINCREMENT, "
		      "attribute text, "
		      "incident integer, "
		      "value text)");
	  query->exec("CREATE TABLE attributes_to_incidents_sources "
		      "(id integer PRIMARY KEY AUTOINCREMENT, "
		      "attribute text, "
		      "incident integer, "
		      "source_text)");
	  query->exec("CREATE TABLE entity_attributes "
		      "(id integer PRIMARY KEY AUTOINCREMENT, "
		      "name text, "
		      "description text, "
		      "father text)");
	  query->exec("CREATE TABLE attributes_to_entities "
		      "(id integer PRIMARY KEY AUTOINCREMENT, "
		      "attribute text, "
		      "entity text, "
		      "value text, "
		      "new integer)");
	  query->exec("CREATE TABLE entity_relationships "
		      "(id integer PRIMARY KEY AUTOINCREMENT, "
		      "name text, "
		      "source text, "
		      "target text, "
		      "comment text, "
		      "type text)");
	  query->exec("CREATE TABLE relationship_types "
		      "(id integer PRIMARY KEY AUTOINCREMENT, "
		      "name text, "
		      "directedness, "
		      "description)");
	  query->exec("CREATE TABLE relationships_to_incidents "
		      "(id integer PRIMARY KEY AUTOINCREMENT, "
		      "relationship text, "
		      "type text, "
		      "incident integer)");
	  query->exec("CREATE TABLE relationships_to_incidents_sources "
		      "(id integer PRIMARY KEY AUTOINCREMENT, "
		      "relationship text, "
		      "type text, "
		      "incident integer, "
		      "source_text text)");
	  query->exec("CREATE TABLE entities "
		      "(id integer, "
		      "name text, "
		      "description text, "
		      "father text)");
	  query->exec("CREATE TABLE journal "
		      "(id integer PRIMARY KEY AUTOINCREMENT, "
		      "time text, "
		      "entry text, "
		      "mark integer)");
	  query->exec("CREATE TABLE linkage_types "
		      "(id integer PRIMARY KEY AUTOINCREMENT, "
		      "name TEXT, "
		      "description text, "
		      "question text, "
		      "direction text)");
	  query->exec("CREATE TABLE linkages "
		      "(id integer PRIMARY KEY AUTOINCREMENT, "
		      "tail integer, "
		      "head integer, "
		      "type text, "
		      "coder text)");
	  query->exec("CREATE TABLE coders "
		      "(id integer PRIMARY KEY AUTOINCREMENT, "
		      "name text)");
	  query->exec("CREATE TABLE coders_to_linkage_types "
		      "(id integer PRIMARY KEY AUTOINCREMENT, "
		      "coder text, "
		      "type text, "
		      "tail integer, "
		      "head integer)");
	  query->exec("CREATE TABLE linkage_comments "
		      "(id integer PRIMARY KEY AUTOINCREMENT, "
		      "tail integer, "
		      "head integer, "
		      "comment text, "
		      "coder text, "
		      "type text)");
	  query->exec("CREATE TABLE save_data "
		      "(attributes_record integer, "
		      "relationships_record integer)");
	  query->exec("INSERT INTO save_data "
		      "(attributes_record, "
		      "relationships_record) "
		      "VALUES (1, 1)");
	  query->exec("CREATE TABLE saved_eg_plots "
		      "(id integer PRIMARY KEY AUTOINCREMENT, "
		      "plot text, "
		      "coder text, "
		      "distance real, "
		      "red integer, "
		      "green integer, "
		      "blue integer)");
	  query->exec("CREATE TABLE saved_eg_plots_settings "
		      "(id integer PRIMARY KEY AUTOINCREMENT, "
		      "plot text, "
		      "lowerbound integer, "
		      "upperbound integer, "
		      "labelson integer, "
		      "labelsize integer)");
	  query->exec("CREATE TABLE saved_eg_plots_incident_nodes " 
		      "(id integer PRIMARY KEY AUTOINCREMENT, "
		      "plot text, "
		      "incident integer, "
		      "ch_order integer, "
		      "width integer, "
		      "curxpos real, " 
		      "curypos real, " 
		      "orixpos real, " 
		      "oriypos real, " 
		      "dislodged integer, "
		      "mode text, "
		      "red integer,"
		      "green integer, "
		      "blue integer, "
		      "alpha integer, "
		      "hidden integer)");   // dislodged boolean (if relevant)
	  query->exec("CREATE TABLE saved_eg_plots_edges "
		      "(id integer PRIMARY KEY AUTOINCREMENT, "
		      "plot text, "
		      "tail integer, "
		      "head integer , "
		      "tailabstractnode integer, "
		      "headabstractnode integer, "
		      "linkage text, "
		      "red integer, "
		      "green integer, "
		      "blue integer, "
		      "alpha integer, "
		      "hidden integer, "
		      "masshidden integer)");
	  query->exec("CREATE TABLE saved_eg_plots_incident_node_labels "
		      "(id integer PRIMARY KEY AUTOINCREMENT, "
		      "plot text, "
		      "incident integer, "
		      "label text, "
		      "curxpos integer, "
		      "curypos integer, "
		      "xoffset real, "
		      "yoffset real, "
		      "red integer, "
		      "green integer, "
		      "blue integer, "
		      "alpha integer, "
		      "hidden integer)");
	  query->exec("CREATE TABLE saved_eg_plots_abstract_nodes "
		      "(id integer PRIMARY KEY AUTOINCREMENT, "
		      "plot text, "
		      "eventid integer, "
		      "ch_order integer, "
		      "colligation text, "
		      "timing text, "
		      "description text, "
		      "comment text, "
		      "width integer, "
		      "mode text, "
		      "curxpos real, "
		      "curypos real, "
		      "orixpos real, "
		      "oriypos real, "
		      "dislodged integer, "
		      "red integer, "
		      "green integer, "
		      "blue integer, "
		      "alpha integer, "
		      "hidden integer)");
	  query->exec("CREATE TABLE saved_eg_plots_incidents_to_abstract_nodes "
		      "(id integer PRIMARY KEY AUTOINCREMENT, "
		      "plot text, "
		      "incident integer, "
		      "abstractnode integer)");
	  query->exec("CREATE TABLE saved_eg_plots_embedded_incidents "
		      "(id integer PRIMARY KEY AUTOINCREMENT, "
		      "plot text, "
		      "incident integer, "
		      "abstractnode integer)");
	  query->exec("CREATE TABLE saved_eg_plots_abstract_nodes_to_abstract_nodes "
		      "(id integer PRIMARY KEY AUTOINCREMENT, "
		      "plot text, "
		      "son integer, "
		      "father integer)");
	  query->exec("CREATE TABLE saved_eg_plots_attributes_to_abstract_nodes "
		      "(id integer PRIMARY KEY AUTOINCREMENT, "
		      "plot text, "
		      "attribute text, "
		      "abstractnode integer, "
		      "value text)");
	  query->exec("CREATE TABLE saved_eg_plots_abstract_node_labels "
		      "(id integer PRIMARY KEY AUTOINCREMENT, "
		      "plot text, "
		      "eventid integer, "
		      "label text, "
		      "curxpos integer, "
		      "curypos integer, "
		      "xoffset real, "
		      "yoffset real, "
		      "red integer, "
		      "green integer, "
		      "blue integer, "
		      "alpha integer, "
		      "hidden integer)");
	  query->exec("CREATE TABLE saved_eg_plots_legend "
		      "(id integer PRIMARY KEY AUTOINCREMENT, "
		      "plot text, "
		      "name text, "
		      "tip text, "
		      "red integer, "
		      "blue integer, "
		      "green integer, "
		      "alpha integer, "
		      "textred integer, "
		      "textblue integer, "
		      "textgreen integer, "
		      "textalpha integer)");
	  query->exec("CREATE TABLE saved_eg_plots_lines "
		      "(id integer PRIMARY KEY AUTOINCREMENT, "
		      "plot text, "
		      "startx real, "
		      "starty real, "
		      "endx real, "
		      "endy real, "
		      "arone integer, "
		      "artwo integer, "
		      "penwidth integer, "
		      "penstyle integer, "
		      "zvalue integer, "
		      "red integer, "
		      "green integer, "
		      "blue integer, "
		      "alpha integer)");
	  query->exec("CREATE TABLE saved_eg_plots_timelines "
		      "(id integer PRIMARY KEY AUTOINCREMENT, "
		      "plot text, "
		      "startx real, "
		      "endx real, "
		      "y real, "
		      "penwidth integer, "
		      "majorinterval real, "
		      "minordivision real, "
		      "majorsize real, "
		      "minorsize real, "
		      "firsttick integer, "
		      "lasttick integer, "
		      "zvalue integer, "
		      "red integer, "
		      "green integer, "
		      "blue integer, "
		      "alpha integer)");
	  query->exec("CREATE TABLE saved_eg_plots_texts "
		      "(id integer PRIMARY KEY AUTOINCREMENT, "
		      "plot text, "
		      "desc text, "
		      "xpos real, "
		      "ypos real, "
		      "width real, "
		      "size int, "
		      "rotation real, "
		      "zvalue integer, "
		      "red integer, "
		      "green integer, "
		      "blue integer, "
		      "alpha integer)");
	  query->exec("CREATE TABLE saved_eg_plots_ellipses "
		      "(id integer PRIMARY KEY AUTOINCREMENT, "
		      "plot text, "
		      "xpos real, "
		      "ypos real, "
		      "topleftx real, "
		      "toplefty real, "
		      "toprightx real, "
		      "toprighty real, "
		      "bottomleftx real, "
		      "bottomlefty real, "
		      "bottomrightx real, "
		      "bottomrighty real, "
		      "rotation real, "
		      "penwidth integer, "
		      "penstyle integer, "
		      "zvalue integer, "
		      "red integer, "
		      "green integer, "
		      "blue integer, "
		      "alpha integer, "
		      "fillred integer, "
		      "fillgreen integer, "
		      "fillblue integer, "
		      "fillalpha integer)");
	  query->exec("CREATE TABLE saved_eg_plots_rects "
		      "(id integer PRIMARY KEY AUTOINCREMENT, "
		      "plot text, "
		      "xpos real, "
		      "ypos real, "
		      "topleftx real, "
		      "toplefty real, "
		      "toprightx real, "
		      "toprighty real, "
		      "bottomleftx real, "
		      "bottomlefty real, "
		      "bottomrightx real, "
		      "bottomrighty real, "
		      "rotation real, "
		      "penwidth integer, "
		      "penstyle integer, "
		      "zvalue integer, "
		      "red integer, "
		      "green integer, "
		      "blue integer, "
		      "alpha integer, "
		      "fillred integer, "
		      "fillgreen integer, "
		      "fillblue integer, "
		      "fillalpha integer)");
	  query->exec("CREATE TABLE saved_eg_plots_contraction "
		      "(id integer PRIMARY KEY AUTOINCREMENT, "
		      "plot text, "
		      "nodeid integer, "
		      "abstract integer, "
		      "xpos real, "
		      "ypos real)");
	  query->exec("CREATE TABLE saved_eg_plots_cases "
		      "(id integer PRIMARY KEY AUTOINCREMENT, "
		      "plot text, "
		      "casename text, "
		      "checked integer)");
	  query->exec("CREATE TABLE saved_eg_plots_guides "
		      "(id integer PRIMARY KEY AUTOINCREMENT, "
		      "plot text, "
		      "xpos real, "
		      "ypos real, "
		      "horizontal integer)");
	  query->exec("CREATE TABLE saved_ng_plots "
		      "(id integer PRIMARY KEY AUTOINCREMENT, "
		      "plot text, "
		      "red integer, "
		      "green integer, "
		      "blue integer)");
	  query->exec("CREATE TABLE saved_ng_plots_network_nodes "
		      "(id integer PRIMARY KEY AUTOINCREMENT, "
		      "plot text, "
		      "entity text, "
		      "description text, "
		      "mode text, "
		      "curxpos real, "
		      "curypos real, "
		      "red integer, "
		      "green integer, "
		      "blue integer, "
		      "alpha integer, "
		      "hidden integer, "
		      "persistent integer, "
		      "masshidden integer)");
	  query->exec("CREATE TABLE saved_ng_plots_node_labels "
		      "(id integer PRIMARY KEY AUTOINCREMENT, "
		      "plot text, "
		      "entity text, "
		      "curxpos real, "
		      "curypos real, "
		      "xoffset real, "
		      "yoffset real, "
		      "fontsize integer, "
		      "red integer, "
		      "green integer, "
		      "blue integer, "
		      "alpha integer, "
		      "hidden integer)");
	  query->exec("CREATE TABLE saved_ng_plots_nodelegend "
		      "(id integer PRIMARY KEY AUTOINCREMENT, "
		      "plot text, "
		      "name text, "
		      "tip text, "
		      "red integer, "
		      "blue integer, "
		      "green integer, "
		      "alpha integer "
		      "textred integer, "
		      "textblue integer, "
		      "textgreen integer, "
		      "textalpha integer, "
		      "hidden integer)");
	  query->exec("CREATE TABLE saved_ng_plots_edgelegend "
		      "(id integer PRIMARY KEY AUTOINCREMENT, "
		      "plot text, "
		      "name text, "
		      "tip text, "
		      "red integer, "
		      "blue integer, "
		      "green integer, "
		      "alpha integer, "
		      "hidden integer)");
	  query->exec("CREATE TABLE saved_ng_plots_directed "
		      "(id integer PRIMARY KEY AUTOINCREMENT, "
		      "plot text, "
		      "tail text, "
		      "head text, "
		      "name text, "
		      "comment text, "
		      "type text, "
		      "height integer, "
		      "filtered integer, "
		      "masshidden integer, "
		      "red integer, "
		      "green integer, "
		      "blue integer, "
		      "alpha integer, "
		      "hidden integer)");
	  query->exec("CREATE TABLE saved_ng_plots_undirected "
		      "(id integer PRIMARY KEY AUTOINCREMENT, "
		      "plot text, "
		      "tail text, "
		      "head text, "
		      "name text, "
		      "comment text, "
		      "type text, "
		      "height integer, "
		      "filtered integer, "
		      "masshidden integer, "
		      "red integer, "
		      "green integer, "
		      "blue integer, "
		      "alpha integer, "
		      "hidden integer)");
	  query->exec("CREATE TABLE saved_ng_plots_incidents_to_edges "
		      "(id integer PRIMARY KEY AUTOINCREMENT, "
		      "plot text, "
		      "incident integer, "
		      "relationship text, "
		      "type text)");
	  query->exec("CREATE TABLE saved_ng_plots_lines "
		      "(id integer PRIMARY KEY AUTOINCREMENT, "
		      "plot text, "
		      "startx real, "
		      "starty real, "
		      "endx real, "
		      "endy real, "
		      "arone integer, "
		      "artwo integer, "
		      "penwidth integer, "
		      "penstyle integer, "
		      "zvalue integer, "
		      "red integer, "
		      "green integer, "
		      "blue integer, "
		      "alpha integer)");
	  query->exec("CREATE TABLE saved_ng_plots_texts "
		      "(id integer PRIMARY KEY AUTOINCREMENT, "
		      "plot text, "
		      "desc text, "
		      "xpos real, "
		      "ypos real, "
		      "width real, "
		      "size int, "
		      "rotation real, "
		      "zvalue integer, "
		      "red integer, "
		      "green integer, "
		      "blue integer, "
		      "alpha integer)");
	  query->exec("CREATE TABLE saved_ng_plots_ellipses "
		      "(id integer PRIMARY KEY AUTOINCREMENT, "
		      "plot text, "
		      "xpos real, "
		      "ypos real, "
		      "topleftx real, "
		      "toplefty real, "
		      "toprightx real, "
		      "toprighty real, "
		      "bottomleftx real, "
		      "bottomlefty real, "
		      "bottomrightx real, "
		      "bottomrighty real, "
		      "rotation real, "
		      "penwidth integer, "
		      "penstyle integer, "
		      "zvalue integer, "
		      "red integer, "
		      "green integer, "
		      "blue integer, "
		      "alpha integer, "
		      "fillred integer, "
		      "fillgreen integer, "
		      "fillblue integer, "
		      "fillalpha integer)");
	  query->exec("CREATE TABLE saved_ng_plots_rects "
		      "(id integer PRIMARY KEY AUTOINCREMENT, "
		      "plot text, "
		      "xpos real, "
		      "ypos real, "
		      "topleftx real, "
		      "toplefty real, "
		      "toprightx real, "
		      "toprighty real, "
		      "bottomleftx real, "
		      "bottomlefty real, "
		      "bottomrightx real, "
		      "bottomrighty real, "
		      "rotation real, "
		      "penwidth integer, "
		      "penstyle integer, "
		      "zvalue integer, "
		      "red integer, "
		      "green integer, "
		      "blue integer, "
		      "alpha integer, "
		      "fillred integer, "
		      "fillgreen integer, "
		      "fillblue integer, "
		      "fillalpha integer)");
	  query->exec("CREATE TABLE saved_ng_plots_settings "
		      "(id integer PRIMARY KEY AUTOINCREMENT, "
		      "plot text, "
		      "lowerbound integer, "
		      "upperbound integer, "
		      "boundson integer, "
		      "weight integer, "
		      "weighton integer, "
		      "labelson integer)");
	  query->exec("CREATE TABLE saved_ng_plots_cases "
		      "(id integer PRIMARY KEY AUTOINCREMENT, "
		      "plot text, "
		      "casename, "
		      "checked)");
	  query->exec("CREATE TABLE saved_ng_plots_guides "
		      "(id integer PRIMARY KEY AUTOINCREMENT, "
		      "plot text, "
		      "xpos real, "
		      "ypos real, "
		      "horizontal integer)");
	  query->exec("CREATE TABLE saved_og_plots "
		      "(id integer PRIMARY KEY AUTOINCREMENT, "
		      "plot text, "
		      "red integer, "
		      "green integer, "
		      "blue integer)");
	  query->exec("CREATE TABLE saved_og_plots_settings "
		      "(id integer PRIMARY KEY AUTOINCREMENT, "
		      "plot text, "
		      "lowerbound real, "
		      "upperbound real, "
		      "labelson integer, "
		      "incidentlabelsonly integer, "
		      "attributelabelsonly integer)");
	  query->exec("CREATE TABLE saved_og_plots_occurrence_items "
		      "(id integer PRIMARY KEY AUTOINCREMENT, "
		      "plot text, "
		      "incident integer, "
		      "ch_order integer, "
		      "attribute text, "
		      "width integer, "
		      "curxpos real, " 
		      "curypos real, " 
		      "orixpos real, " 
		      "oriypos real, " 
		      "red integer, "
		      "green integer, "
		      "blue integer, "
		      "alpha integer, "
		      "hidden integer, "
		      "perm integer, "
		      "relationship integer, "
		      "grouped integer)"); 
	  query->exec("CREATE TABLE saved_og_plots_occurrence_labels "
		      "(id integer PRIMARY KEY AUTOINCREMENT, "
		      "plot text, "
		      "incident integer, "
		      "attribute string, "
		      "label text, "
		      "curxpos integer, "
		      "curypos integer, "
		      "xoffset real, "
		      "yoffset real, "
		      "red integer, "
		      "green integer, "
		      "blue integer, "
		      "alpha integer, "
		      "hidden integer, "
		      "relationship integer)");
	  query->exec("CREATE TABLE saved_og_plots_legend "
		      "(id integer PRIMARY KEY AUTOINCREMENT, "
		      "plot text, "
		      "name text, "
		      "tip text, "
		      "red integer, "
		      "blue integer, "
		      "green integer, "
		      "alpha integer, "
		      "relationship integer)");
	  query->exec("CREATE TABLE saved_og_plots_lines "
		      "(id integer PRIMARY KEY AUTOINCREMENT, "
		      "plot text, "
		      "startx real, "
		      "starty real, "
		      "endx real, "
		      "endy real, "
		      "arone integer, "
		      "artwo integer, "
		      "penwidth integer, "
		      "penstyle integer, "
		      "zvalue integer, "
		      "red integer, "
		      "green integer, "
		      "blue integer, "
		      "alpha integer)");
	  query->exec("CREATE TABLE saved_og_plots_timelines "
		      "(id integer PRIMARY KEY AUTOINCREMENT, "
		      "plot text, "
		      "startx real, "
		      "endx real, "
		      "y real, "
		      "penwidth integer, "
		      "majorinterval real, "
		      "minordivision real, "
		      "majorsize real, "
		      "minorsize real, "
		      "firsttick integer, "
		      "lasttick integer, "
		      "zvalue integer, "
		      "red integer, "
		      "green integer, "
		      "blue integer, "
		      "alpha integer)");
	  query->exec("CREATE TABLE saved_og_plots_texts "
		      "(id integer PRIMARY KEY AUTOINCREMENT, "
		      "plot text, "
		      "desc text, "
		      "xpos real, "
		      "ypos real, "
		      "width real, "
		      "size int, "
		      "rotation real, "
		      "zvalue integer, "
		      "red integer, "
		      "green integer, "
		      "blue integer, "
		      "alpha integer)");
	  query->exec("CREATE TABLE saved_og_plots_ellipses "
		      "(id integer PRIMARY KEY AUTOINCREMENT, "
		      "plot text, "
		      "xpos real, "
		      "ypos real, "
		      "topleftx real, "
		      "toplefty real, "
		      "toprightx real, "
		      "toprighty real, "
		      "bottomleftx real, "
		      "bottomlefty real, "
		      "bottomrightx real, "
		      "bottomrighty real, "
		      "rotation real, "
		      "penwidth integer, "
		      "penstyle integer, "
		      "zvalue integer, "
		      "red integer, "
		      "green integer, "
		      "blue integer, "
		      "alpha integer, "
		      "fillred integer, "
		      "fillgreen integer, "
		      "fillblue integer, "
		      "fillalpha integer)");
	  query->exec("CREATE TABLE saved_og_plots_rects "
		      "(id integer PRIMARY KEY AUTOINCREMENT, "
		      "plot text, "
		      "xpos real, "
		      "ypos real, "
		      "topleftx real, "
		      "toplefty real, "
		      "toprightx real, "
		      "toprighty real, "
		      "bottomleftx real, "
		      "bottomlefty real, "
		      "bottomrightx real, "
		      "bottomrighty real, "
		      "rotation real, "
		      "penwidth integer, "
		      "penstyle integer, "
		      "zvalue integer, "
		      "red integer, "
		      "green integer, "
		      "blue integer, "
		      "alpha integer, "
		      "fillred integer, "
		      "fillgreen integer, "
		      "fillblue integer, "
		      "fillalpha integer)");
	  query->exec("CREATE TABLE saved_og_plots_cases "
		      "(id integer PRIMARY KEY AUTOINCREMENT, "
		      "plot text, "
		      "casename text, "
		      "checked integer)");
	  query->exec("CREATE TABLE saved_og_plots_guides "
		      "(id integer PRIMARY KEY AUTOINCREMENT, "
		      "plot text, "
		      "xpos real, "
		      "ypos real, "
		      "horizontal integer)");
	  query->exec("CREATE TABLE cases "
		      "(id integer PRIMARY KEY AUTOINCREMENT, "
		      "name text, "
		      "description text)");
	  query->exec("CREATE TABLE incidents_to_cases "
		      "(id integer PRIMARY KEY AUTOINCREMENT, "
		      "incident integer, "
		      "casename text)");
	  delete query;
	  qApp->restoreOverrideCursor();
	  qApp->processEvents();
	}
      _exitStatus = 0;
      this->close();
    }
  else 
    {
      _exitStatus = 2;
    }
}

void WelcomeDialog::openDatabase() 
{
  QString dbName = QFileDialog::getOpenFileName(this, tr("Select database"),"", tr("db files (*.db)"));
  if (!dbName.trimmed().isEmpty()) 
    {
      _esdPtr->openDB(dbName);
      bool ok = _esdPtr->database.open();
      if (!ok) 
	{
	  QPointer<QMessageBox> errorBox = new QMessageBox(this);
	  errorBox->setText(tr("<b>ERROR</b>"));
	  errorBox->setInformativeText("Could not open the database.");
	  errorBox->exec();
	  delete errorBox;
	  return;
	}
      else 
	{
	  /* 
	     Let's make sure that we create all tables that are not yet present.
	     For example, this could be the case after updates of the program. 
	  */
	  _esdPtr->database.exec("PRAGMA synchronous=OFF");
	  _esdPtr->database.exec("PRAGMA journal_mode=MEMORY");
	  QSqlQuery *query = new QSqlQuery;
	  qApp->setOverrideCursor(Qt::WaitCursor); // This can take a while
	  query->exec("CREATE TABLE IF NOT EXISTS incidents "
		      "(id integer PRIMARY KEY AUTOINCREMENT, "
		      "ch_order integer, "
		      "timestamp text, "
		      "description text, "
		      "raw text, "
		      "comment text, "
		      "source text, "
		      "mark integer)");
	  query->exec("CREATE TABLE IF NOT EXISTS incident_attributes "
		      "(id integer PRIMARY KEY AUTOINCREMENT, "
		      "name text, "
		      "description text, "
		      "father text)");
	  query->exec("CREATE TABLE IF NOT EXISTS attributes_to_incidents "
		      "(id integer PRIMARY KEY AUTOINCREMENT, "
		      "attribute text, "
		      "incident integer, "
		      "value text)");
	  query->exec("CREATE TABLE IF NOT EXISTS attributes_to_incidents_sources "
		      "(id integer PRIMARY KEY AUTOINCREMENT, "
		      "attribute text, "
		      "incident integer, "
		      "source_text)");
	  query->exec("CREATE TABLE IF NOT EXISTS entity_attributes "
		      "(id integer PRIMARY KEY AUTOINCREMENT, "
		      "name text, "
		      "description text, "
		      "father text)");
	  query->exec("CREATE TABLE IF NOT EXISTS attributes_to_entities "
		      "(id integer PRIMARY KEY AUTOINCREMENT, "
		      "attribute text, "
		      "entity text, "
		      "value text, "
		      "new integer)");
	  query->exec("CREATE TABLE IF NOT EXISTS entity_relationships "
		      "(id integer PRIMARY KEY AUTOINCREMENT, "
		      "name text, "
		      "source text, "
		      "target text, "
		      "comment text, "
		      "type text)");
	  query->exec("CREATE TABLE IF NOT EXISTS relationship_types "
		      "(id integer PRIMARY KEY AUTOINCREMENT, "
		      "name text, "
		      "directedness, "
		      "description)");
	  query->exec("CREATE TABLE IF NOT EXISTS relationships_to_incidents "
		      "(id integer PRIMARY KEY AUTOINCREMENT, "
		      "relationship text, "
		      "type text, "
		      "incident integer)");
	  query->exec("CREATE TABLE IF NOT EXISTS relationships_to_incidents_sources "
		      "(id integer PRIMARY KEY AUTOINCREMENT, "
		      "relationship text, "
		      "type text, "
		      "incident integer, "
		      "source_text text)");
	  query->exec("CREATE TABLE IF NOT EXISTS entities "
		      "(id integer, "
		      "name text, "
		      "description text, "
		      "father text)");
	  query->exec("CREATE TABLE IF NOT EXISTS journal "
		      "(id integer PRIMARY KEY AUTOINCREMENT, "
		      "time text, "
		      "entry text "
		      "mark integer)");
	  query->exec("CREATE TABLE IF NOT EXISTS linkage_types "
		      "(id integer PRIMARY KEY AUTOINCREMENT, "
		      "name TEXT, "
		      "description text, "
		      "question text, "
		      "direction text)");
	  query->exec("CREATE TABLE IF NOT EXISTS linkages "
		      "(id integer PRIMARY KEY AUTOINCREMENT, "
		      "tail integer, "
		      "head integer, "
		      "type text, "
		      "coder text)");
	  query->exec("CREATE TABLE IF NOT EXISTS coders "
		      "(id integer PRIMARY KEY AUTOINCREMENT, "
		      "name text)");
	  query->exec("CREATE TABLE IF NOT EXISTS coders_to_linkage_types "
		      "(id integer PRIMARY KEY AUTOINCREMENT, "
		      "coder text, "
		      "type text, "
		      "tail integer, "
		      "head integer)");
	  query->exec("CREATE TABLE IF NOT EXISTS linkage_comments "
		      "(id integer PRIMARY KEY AUTOINCREMENT, "
		      "tail integer, "
		      "head integer, "
		      "comment text, "
		      "coder text, "
		      "type text)");
	  query->exec("CREATE TABLE IF NOT EXISTS save_data "
		      "(attributes_record integer, "
		      "relationships_record integer)");
	  query->exec("SELECT * FROM save_data");
	  query->first();
	  if (query->isNull(0)) 
	    {
	      query->exec("INSERT INTO save_data "
			  "(attributes_record, "
			  "relationships_record) "
			  "VALUES (1, 1)");
	    }
	  query->exec("CREATE TABLE IF NOT EXISTS saved_eg_plots "
		      "(id integer PRIMARY KEY AUTOINCREMENT, "
		      "plot text, "
		      "coder text, "
		      "distance real, "
		      "red integer, "
		      "green integer, "
		      "blue integer)");
	  query->exec("CREATE TABLE IF NOT EXISTS saved_eg_plots_settings "
		      "(id integer PRIMARY KEY AUTOINCREMENT, "
		      "plot text, "
		      "lowerbound integer, "
		      "upperbound integer, "
		      "labelson integer, "
		      "labelsize integer)");
	  query->exec("CREATE TABLE IF NOT EXISTS saved_eg_plots_incident_nodes " 
		      "(id integer PRIMARY KEY AUTOINCREMENT, "
		      "plot text, "
		      "incident integer , "
		      "ch_order integer, "
		      "width integer, "
		      "curxpos real, "
		      "curypos real, "
		      "orixpos real, "
		      "oriypos real, "
		      "dislodged integer, "
		      "mode text, "
		      "red integer, "
		      "green integer, "
		      "blue integer, "
		      "alpha integer, "
		      "hidden integer)");
	  query->exec("CREATE TABLE IF NOT EXISTS saved_eg_plots_edges "
		      "(id integer PRIMARY KEY AUTOINCREMENT, "
		      "plot text, "
		      "tail integer, "
		      "head integer, "
		      "tailabstractnode integer, "
		      "headabstractnode integer, "
		      "linkage text, "
		      "red integer, "
		      "green integer, "
		      "blue integer, "
		      "alpha integer, "
		      "hidden integer, "
		      "masshidden integer)");
	  query->exec("CREATE TABLE IF NOT EXISTS saved_eg_plots_incident_node_labels "
		      "(id integer PRIMARY KEY AUTOINCREMENT, "
		      "plot text, "
		      "incident integer, "
		      "label text, "
		      "curxpos real, "
		      "curypos real, "
		      "xoffset real, "
		      "yoffset real, "
		      "red integer, "
		      "green integer, "
		      "blue integer, "
		      "alpha integer, "
		      "hidden integer)");
	  query->exec("CREATE TABLE IF NOT EXISTS saved_eg_plots_abstract_nodes "
		      "(id integer PRIMARY KEY AUTOINCREMENT, "
		      "plot text, "
		      "eventid integer, "
		      "ch_order integer, "
		      "colligation text, "
		      "timing text, "
		      "description text, "
		      "comment text, "
		      "width integer, "
		      "mode text, "
		      "curxpos real, "
		      "curypos real, "
		      "orixpos real, "
		      "oriypos real, "
		      "dislodged integer, "
		      "red integer, "
		      "green integer, "
		      "blue integer, "
		      "alpha integer, "
		      "hidden integer)");
	  query->exec("CREATE TABLE IF NOT EXISTS saved_eg_plots_incidents_to_abstract_nodes "
		      "(id integer PRIMARY KEY AUTOINCREMENT, "
		      "plot text, "
		      "incident integer, "
		      "abstractnode integer)");
	  query->exec("CREATE TABLE IF NOT EXISTS saved_eg_plots_embedded_incidents "
		      "(id integer PRIMARY KEY AUTOINCREMENT, "
		      "plot text, "
		      "incident integer, "
		      "abstractnode integer)");
	  query->exec("CREATE TABLE IF NOT EXISTS saved_eg_plots_abstract_nodes_to_abstract_nodes "
		      "(id integer PRIMARY KEY AUTOINCREMENT, "
		      "plot text, "
		      "son integer, "
		      "father integer)");
	  query->exec("CREATE TABLE IF NOT EXISTS saved_eg_plots_attributes_to_abstract_nodes "
		      "(id integer PRIMARY KEY AUTOINCREMENT, "
		      "plot text, "
		      "attribute text, "
		      "abstractnode integer, "
		      "value text)");
	  query->exec("CREATE TABLE IF NOT EXISTS saved_eg_plots_abstract_node_labels "
		      "(id integer PRIMARY KEY AUTOINCREMENT, "
		      "plot text, "
		      "eventid integer, "
		      "label text, "
		      "curxpos integer, "
		      "curypos integer, "
		      "xoffset real, "
		      "yoffset real, "
		      "red integer, "
		      "green integer, "
		      "blue integer, "
		      "alpha integer, "
		      "hidden integer)");
	  query->exec("CREATE TABLE IF NOT EXISTS saved_eg_plots_legend "
		      "(id integer PRIMARY KEY AUTOINCREMENT, "
		      "plot text, "
		      "name text, "
		      "tip text, "
		      "red integer, "
		      "blue integer, "
		      "green integer, "
		      "alpha integer, "
		      "textred integer, "
		      "textblue integer, "
		      "textgreen integer, "
		      "textalpha integer)");
	  query->exec("CREATE TABLE IF NOT EXISTS saved_eg_plots_lines "
		      "(id integer PRIMARY KEY AUTOINCREMENT, "
		      "plot text, "
		      "startx real, "
		      "starty real, "
		      "endx real, "
		      "endy real, "
		      "arone integer, "
		      "artwo integer, "
		      "penwidth integer, "
		      "penstyle integer, "
		      "zvalue integer, "
		      "red integer, "
		      "green integer, "
		      "blue integer, "
		      "alpha integer)");
	  query->exec("CREATE TABLE IF NOT EXISTS saved_eg_plots_timelines "
		      "(id integer PRIMARY KEY AUTOINCREMENT, "
		      "plot text, "
		      "startx real, "
		      "endx real, "
		      "y real, "
		      "penwidth integer, "
		      "majorinterval real, "
		      "minordivision real, "
		      "majorsize real, "
		      "minorsize real, "
		      "firsttick integer, "
		      "lasttick integer, "
		      "zvalue integer, "
		      "red integer, "
		      "green integer, "
		      "blue integer, "
		      "alpha integer)");
	  query->exec("CREATE TABLE IF NOT EXISTS saved_eg_plots_texts "
		      "(id integer PRIMARY KEY AUTOINCREMENT, "
		      "plot text, "
		      "desc text, "
		      "xpos real, "
		      "ypos real, "
		      "width real, "
		      "size int, "
		      "rotation real, "
		      "zvalue integer, "
		      "red integer, "
		      "green integer, "
		      "blue integer, "
		      "alpha integer)");
	  query->exec("CREATE TABLE IF NOT EXISTS saved_eg_plots_ellipses "
		      "(id integer PRIMARY KEY AUTOINCREMENT, "
		      "plot text, "
		      "xpos real, "
		      "ypos real, "
		      "topleftx real, "
		      "toplefty real, "
		      "toprightx real, "
		      "toprighty real, "
		      "bottomleftx real, "
		      "bottomlefty real, "
		      "bottomrightx real, "
		      "bottomrighty real, "
		      "rotation real, "
		      "penwidth integer, "
		      "penstyle integer, "
		      "zvalue integer, "
		      "red integer, "
		      "green integer, "
		      "blue integer, "
		      "alpha integer, "
		      "fillred integer, "
		      "fillgreen integer, "
		      "fillblue integer, "
		      "fillalpha integer)");
	  query->exec("CREATE TABLE IF NOT EXISTS saved_eg_plots_rects "
		      "(id integer PRIMARY KEY AUTOINCREMENT, "
		      "plot text, "
		      "xpos real, "
		      "ypos real, "
		      "topleftx real, "
		      "toplefty real, "
		      "toprightx real, "
		      "toprighty real, "
		      "bottomleftx real, "
		      "bottomlefty real, "
		      "bottomrightx real, "
		      "bottomrighty real, "
		      "rotation real, "
		      "penwidth integer, "
		      "penstyle integer, "
		      "zvalue integer, "
		      "red integer, "
		      "green integer, "
		      "blue integer, "
		      "alpha integer, "
		      "fillred integer, "
		      "fillgreen integer, "
		      "fillblue integer, "
		      "fillalpha integer)");
	  query->exec("CREATE TABLE IF NOT EXISTS saved_eg_plots_contraction "
		      "(id integer PRIMARY KEY AUTOINCREMENT, "
		      "plot text, "
		      "nodeid integer, "
		      "abstract integer, "
		      "xpos real, "
		      "ypos real)");
	  query->exec("CREATE TABLE IF NOT EXISTS saved_eg_plots_cases "
		      "(id integer PRIMARY KEY AUTOINCREMENT, "
		      "plot text, "
		      "casename text, "
		      "checked integer)");
	  query->exec("CREATE TABLE IF NOT EXISTS saved_eg_plots_guides "
		      "(id integer PRIMARY KEY AUTOINCREMENT, "
		      "plot text, "
		      "xpos real, "
		      "ypos real, "
		      "horizontal integer)");
	  query->exec("CREATE TABLE IF NOT EXISTS saved_ng_plots "
		      "(id integer PRIMARY KEY AUTOINCREMENT, "
		      "plot text, "
		      "red integer, "
		      "green integer, "
		      "blue integer)");
	  query->exec("CREATE TABLE IF NOT EXISTS saved_ng_plots_network_nodes "
		      "(id integer PRIMARY KEY AUTOINCREMENT, "
		      "plot text, "
		      "entity text, "
		      "description text, "
		      "mode text, "
		      "curxpos real, "
		      "curypos real, "
		      "red integer, "
		      "green integer, "
		      "blue integer, "
		      "alpha integer, "
		      "hidden integer, "
		      "persistent integer, "
		      "masshidden integer)");
	  query->exec("CREATE TABLE IF NOT EXISTS saved_ng_plots_node_labels "
		      "(id integer PRIMARY KEY AUTOINCREMENT, "
		      "plot text, "
		      "entity text, "
		      "curxpos real, "
		      "curypos real, "
		      "xoffset real, "
		      "yoffset real, "
		      "fontsize integer, "
		      "red integer, "
		      "green integer, "
		      "blue integer, "
		      "alpha integer, "
		      "hidden integer)");
	  query->exec("CREATE TABLE IF NOT EXISTS saved_ng_plots_nodelegend "
		      "(id integer PRIMARY KEY AUTOINCREMENT, "
		      "plot text, "
		      "name text, "
		      "tip text, "
		      "red integer, "
		      "blue integer, "
		      "green integer, "
		      "alpha integer, "
		      "textred integer, "
		      "textblue integer, "
		      "textgreen integer, "
		      "textalpha integer, "
		      "hidden integer)");
	  query->exec("CREATE TABLE IF NOT EXISTS saved_ng_plots_edgelegend "
		      "(id integer PRIMARY KEY AUTOINCREMENT, "
		      "plot text, "
		      "name text, "
		      "tip text, "
		      "red integer, "
		      "blue integer, "
		      "green integer, "
		      "alpha integer, "
		      "hidden integer)");
	  query->exec("CREATE TABLE IF NOT EXISTS saved_ng_plots_directed "
		      "(id integer PRIMARY KEY AUTOINCREMENT, "
		      "plot text, "
		      "tail text, "
		      "head text, "
		      "name text, "
		      "comment text, "
		      "type text, "
		      "height integer, "
		      "filtered integer, "
		      "masshidden integer, "
		      "red integer, "
		      "green integer, "
		      "blue integer, "
		      "alpha integer, "
		      "hidden integer)");
	  query->exec("CREATE TABLE IF NOT EXISTS saved_ng_plots_undirected "
		      "(id integer PRIMARY KEY AUTOINCREMENT, "
		      "plot text, "
		      "tail text, "
		      "head text, "
		      "name text, "
		      "comment text, "
		      "type text, "
		      "height integer, "
		      "filtered integer, "
		      "masshidden integer, "
		      "red integer, "
		      "green integer, "
		      "blue integer, "
		      "alpha integer, "
		      "hidden integer)");
	  query->exec("CREATE TABLE IF NOT EXISTS saved_ng_plots_incidents_to_edges "
		      "(id integer PRIMARY KEY AUTOINCREMENT, "
		      "plot text, "
		      "incident integer, "
		      "relationship text, "
		      "type text)");
	  query->exec("CREATE TABLE IF NOT EXISTS saved_ng_plots_lines "
		      "(id integer PRIMARY KEY AUTOINCREMENT, "
		      "plot text, "
		      "startx real, "
		      "starty real, "
		      "endx real, "
		      "endy real, "
		      "arone integer, "
		      "artwo integer, "
		      "penwidth integer, "
		      "penstyle integer, "
		      "zvalue integer, "
		      "red integer, "
		      "green integer, "
		      "blue integer, "
		      "alpha integer)");
	  query->exec("CREATE TABLE IF NOT EXISTS saved_ng_plots_texts "
		      "(id integer PRIMARY KEY AUTOINCREMENT, "
		      "plot text, "
		      "desc text, "
		      "xpos real, "
		      "ypos real, "
		      "width real, "
		      "size int, "
		      "rotation real, "
		      "zvalue integer, "
		      "red integer, "
		      "green integer, "
		      "blue integer, "
		      "alpha integer)");
	  query->exec("CREATE TABLE IF NOT EXISTS saved_ng_plots_ellipses "
		      "(id integer PRIMARY KEY AUTOINCREMENT, "
		      "plot text, "
		      "xpos real, "
		      "ypos real, "
		      "topleftx real, "
		      "toplefty real, "
		      "toprightx real, "
		      "toprighty real, "
		      "bottomleftx real, "
		      "bottomlefty real, "
		      "bottomrightx real, "
		      "bottomrighty real, "
		      "rotation real, "
		      "penwidth integer, "
		      "penstyle integer, "
		      "zvalue integer, "
		      "red integer, "
		      "green integer, "
		      "blue integer, "
		      "alpha integer, "
		      "fillred integer, "
		      "fillgreen integer, "
		      "fillblue integer, "
		      "fillalpha integer)");
	  query->exec("CREATE TABLE IF NOT EXISTS saved_ng_plots_rects "
		      "(id integer PRIMARY KEY AUTOINCREMENT, "
		      "plot text, "
		      "xpos real, "
		      "ypos real, "
		      "topleftx real, "
		      "toplefty real, "
		      "toprightx real, "
		      "toprighty real, "
		      "bottomleftx real, "
		      "bottomlefty real, "
		      "bottomrightx real, "
		      "bottomrighty real, "
		      "rotation real, "
		      "penwidth integer, "
		      "penstyle integer, "
		      "zvalue integer, "
		      "red integer, "
		      "green integer, "
		      "blue integer, "
		      "alpha integer, "
		      "fillred integer, "
		      "fillgreen integer, "
		      "fillblue integer, "
		      "fillalpha integer)");
	  query->exec("CREATE TABLE IF NOT EXISTS saved_ng_plots_settings "
		      "(id integer PRIMARY KEY AUTOINCREMENT, "
		      "plot text, "
		      "lowerbound integer, "
		      "upperbound integer, "
		      "boundson integer, "
		      "weight integer, "
		      "weighton integer, "
		      "labelson integer)");
	  query->exec("CREATE TABLE IF NOT EXISTS saved_ng_plots_cases "
		      "(id integer PRIMARY KEY AUTOINCREMENT, "
		      "plot text, "
		      "casename, "
		      "checked)");
	  query->exec("CREATE TABLE IF NOT EXISTS saved_ng_plots_guides "
		      "(id integer PRIMARY KEY AUTOINCREMENT, "
		      "plot text, "
		      "xpos real, "
		      "ypos real, "
		      "horizontal integer)");
	  query->exec("CREATE TABLE IF NOT EXISTS saved_og_plots "
		      "(id integer PRIMARY KEY AUTOINCREMENT, "
		      "plot text, "
		      "red integer, "
		      "green integer, "
		      "blue integer)");
	  query->exec("CREATE TABLE IF NOT EXISTS saved_og_plots_settings "
		      "(id integer PRIMARY KEY AUTOINCREMENT, "
		      "plot text, "
		      "lowerbound real, "
		      "upperbound real, "
		      "labelson integer, "
		      "incidentlabelsonly integer, "
		      "attributelabelsonly integer)");
	  query->exec("CREATE TABLE IF NOT EXISTS saved_og_plots_occurrence_items " 
		      "(id integer PRIMARY KEY AUTOINCREMENT, "
		      "plot text, "
		      "incident integer, "
		      "ch_order integer, "
		      "attribute text, "
		      "width integer, "
		      "curxpos real, " // Current x position (scenePos)
		      "curypos real, " // Current y position (scenePos)
		      "orixpos real, " // Original x position
		      "oriypos real, " // Original y position
		      "red integer, "
		      "green integer, "
		      "blue integer, "
		      "alpha integer, "
		      "hidden integer, "
		      "perm integer, "
		      "relationship integer, "
		      "grouped integer)");
	  query->exec("CREATE TABLE IF NOT EXISTS saved_og_plots_occurrence_labels "
		      "(id integer PRIMARY KEY AUTOINCREMENT, "
		      "plot text, "
		      "incident integer, "
		      "attribute text, "
		      "label text, "
		      "curxpos integer, "
		      "curypos integer, "
		      "xoffset real, "
		      "yoffset real, "
		      "red integer, "
		      "green integer, "
		      "blue integer, "
		      "alpha integer, "
		      "hidden integer, "
		      "relationship integer)");
	  query->exec("CREATE TABLE IF NOT EXISTS saved_og_plots_legend "
		      "(id integer PRIMARY KEY AUTOINCREMENT, "
		      "plot text, "
		      "name text, "
		      "tip text, "
		      "red integer, "
		      "blue integer, "
		      "green integer, "
		      "alpha integer, "
		      "relationship integer)");
	  query->exec("CREATE TABLE IF NOT EXISTS saved_og_plots_lines "
		      "(id integer PRIMARY KEY AUTOINCREMENT, "
		      "plot text, "
		      "startx real, "
		      "starty real, "
		      "endx real, "
		      "endy real, "
		      "arone integer, "
		      "artwo integer, "
		      "penwidth integer, "
		      "penstyle integer, "
		      "zvalue integer, "
		      "red integer, "
		      "green integer, "
		      "blue integer, "
		      "alpha integer)");
	  query->exec("CREATE TABLE IF NOT EXISTS saved_og_plots_timelines "
		      "(id integer PRIMARY KEY AUTOINCREMENT, "
		      "plot text, "
		      "startx real, "
		      "endx real, "
		      "y real, "
		      "penwidth integer, "
		      "majorinterval real, "
		      "minordivision real, "
		      "majorsize real, "
		      "minorsize real, "
		      "firsttick integer, "
		      "lasttick integer, "
		      "zvalue integer, "
		      "red integer, "
		      "green integer, "
		      "blue integer, "
		      "alpha integer)");
	  query->exec("CREATE TABLE IF NOT EXISTS saved_og_plots_texts "
		      "(id integer PRIMARY KEY AUTOINCREMENT, "
		      "plot text, "
		      "desc text, "
		      "xpos real, "
		      "ypos real, "
		      "width real, "
		      "size int, "
		      "rotation real, "
		      "zvalue integer, "
		      "red integer, "
		      "green integer, "
		      "blue integer, "
		      "alpha integer)");
	  query->exec("CREATE TABLE IF NOT EXISTS saved_og_plots_ellipses "
		      "(id integer PRIMARY KEY AUTOINCREMENT, "
		      "plot text, "
		      "xpos real, "
		      "ypos real, "
		      "topleftx real, "
		      "toplefty real, "
		      "toprightx real, "
		      "toprighty real, "
		      "bottomleftx real, "
		      "bottomlefty real, "
		      "bottomrightx real, "
		      "bottomrighty real, "
		      "rotation real, "
		      "penwidth integer, "
		      "penstyle integer, "
		      "zvalue integer, "
		      "red integer, "
		      "green integer, "
		      "blue integer, "
		      "alpha integer, "
		      "fillred integer, "
		      "fillgreen integer, "
		      "fillblue integer, "
		      "fillalpha integer)");
	  query->exec("CREATE TABLE IF NOT EXISTS saved_og_plots_rects "
		      "(id integer PRIMARY KEY AUTOINCREMENT, "
		      "plot text, "
		      "xpos real, "
		      "ypos real, "
		      "topleftx real, "
		      "toplefty real, "
		      "toprightx real, "
		      "toprighty real, "
		      "bottomleftx real, "
		      "bottomlefty real, "
		      "bottomrightx real, "
		      "bottomrighty real, "
		      "rotation real, "
		      "penwidth integer, "
		      "penstyle integer, "
		      "zvalue integer, "
		      "red integer, "
		      "green integer, "
		      "blue integer, "
		      "alpha integer, "
		      "fillred integer, "
		      "fillgreen integer, "
		      "fillblue integer, "
		      "fillalpha integer)");
	  query->exec("CREATE TABLE IF NOT EXISTS saved_og_plots_cases "
		      "(id integer PRIMARY KEY AUTOINCREMENT, "
		      "plot text, "
		      "casename text, "
		      "checked integer)");
	  query->exec("CREATE TABLE IF NOT EXISTS cases "
		      "(id integer PRIMARY KEY AUTOINCREMENT, "
		      "name text, "
		      "description text)");
	  query->exec("CREATE TABLE IF NOT EXISTS incidents_to_cases "
		      "(id integer PRIMARY KEY AUTOINCREMENT, "
		      "incident integer, "
		      "casename text)");
	  query->exec("CREATE TABLE IF NOT EXISTS saved_og_plots_guides "
		      "(id integer PRIMARY KEY AUTOINCREMENT, "
		      "plot text, "
		      "xpos real, "
		      "ypos real, "
		      "horizontal integer)");
	  qApp->restoreOverrideCursor();
	  qApp->processEvents();
	  _exitStatus = 0;
	  delete query;
	  this->close();
	}
    }
  else 
    {
      _exitStatus = 2;
    }
}

void WelcomeDialog::quitApp() 
{
  _exitStatus = 1;
  this->close();
}

int WelcomeDialog::getExitStatus() 
{
  return _exitStatus;
}
