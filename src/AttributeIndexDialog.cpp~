#include "../include/AttributeIndexDialog.h"
#include <QIntValidator>

IndexDialog::IndexDialog(QWidget *parent, std::vector <std::vector <std::string> >::size_type max) : QDialog(parent) {
  // First we construct our dialog's entities.
  indexLabel = new QLabel(tr("Incident index:"));
  indexText = "";
  indexField = new QLineEdit();
  indexField->setValidator(new QIntValidator(1, max, this)); 
  goButton = new QPushButton(tr("Go"));
  goButton->setEnabled(false); // We only activate this button if there is something in the fields.
  cancelButton = new QPushButton(tr("Cancel"));

  // We connect the signals to the appropriate slots.
  connect(goButton, SIGNAL(clicked()), this, SLOT(go()));
  connect(cancelButton, SIGNAL(clicked()), this, SLOT(cancel()));
  connect(indexField, SIGNAL(textChanged(const QString &)), this, SLOT(setIndexText(const QString &)));
  
  // Then we create the layout.
  QPointer<QVBoxLayout> mainLayout = new QVBoxLayout;

  QPointer<QHBoxLayout> fieldLayout = new QHBoxLayout;
  fieldLayout->addWidget(indexLabel);
  fieldLayout->addWidget(indexField);

  QPointer<QHBoxLayout> buttonLayout = new QHBoxLayout;
  buttonLayout->addWidget(goButton);
  buttonLayout->addWidget(cancelButton);
  
  mainLayout->addLayout(fieldLayout);
  mainLayout->addLayout(buttonLayout);

  setLayout(mainLayout);
  setWindowTitle(tr("Jump to index"));
  setFixedHeight(sizeHint().height());
  // And this finished the constructor.
}

void IndexDialog::setIndexText(const QString newIndex) {
  indexText = newIndex.toStdString();
  indexText.erase(indexText.find_last_not_of(" \n\r\t")+1);
  // Let us immediately check if we should active the go Button.
  if (indexText != "") {
    goButton->setEnabled(true); 
  } else {
    goButton->setEnabled(false);
  }
}

void IndexDialog::go() {
  this->close();
}

void IndexDialog::cancel() {
  indexText = "0";
  this->close();
}

std::string IndexDialog::getIndexText() {
  return indexText;
}

